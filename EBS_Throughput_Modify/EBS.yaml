AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating EventBridge rule, Step Function, and Lambda function,Used to modify the throughput of EBS after EC2 started.

Parameters:
  TimerDuration:
    Type: Number
    Default: 120
    Description: The duration of the timer in seconds.

  ModifiedThroughputValue:
    Type: Number
    Default: 125
    Description: The value to set the EBS throughput to for the EC2 instance.

  ThresholdThroughputValue:
    Type: Number
    Default: 500
    Description: The value of the threshold EBS throughput,If EBS throughput is greater than this value, the throughput will be modified.

Resources:
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  EventsRuleRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: !Sub "StartStateMachineExecutionPolicy-${AWS::AccountId}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt EC2StatusChangeStepFunction.Arn                

  EC2StatusChangeEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EC2StatusChangeEventRule
      Description: Event rule to capture EC2 status changes to 'running'
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - running
      Targets:
          - Arn: !GetAtt EC2StatusChangeStepFunction.Arn
            Id: "TargetStepFunction"
            RoleArn: !GetAtt EventsRuleRole.Arn # Add RoleArn for the target

  EC2StatusChangeStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Amazon Statesfor scheduling a task to invoke Lambda.",
              "StartAt": "Wait a while",
              "States": {
                "Wait a while": {
                  "Type": "Wait",
                  "Next": "Modify_EBS_Throughput",
                  "Seconds": ${TimerDuration},
                  "Comment": "等待一定时间",
                  "OutputPath": "$"
                },
                "Modify_EBS_Throughput": {
                  "Type": "Task",
                  "Resource": "${EC2StatusChangeLambdaArn}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "End": true
                }
              }
            }
          - {EC2StatusChangeLambdaArn: !GetAtt [ EC2StatusChangeLambda, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  EC2StatusChangeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2StatusChangeLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"

  EC2StatusChangeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EC2StatusChangeLambda
      Handler: index.lambda_handler
      Runtime: python3.10
      Timeout: 10
      Role: !GetAtt EC2StatusChangeLambdaRole.Arn
      Environment:
        Variables:
          throughput_value:
            Ref: ModifiedThroughputValue
          Threshold_Value:
            Ref: ThresholdThroughputValue
      Code:
        ZipFile: |
          import boto3,os

          def get_ebs_volume_id(instance_id):
              ec2 = boto3.client('ec2')
              
              try:
                  response = ec2.describe_instances(InstanceIds=[instance_id])
                  volume_id = response['Reservations'][0]['Instances'][0]['BlockDeviceMappings'][0]['Ebs']['VolumeId']
                  return volume_id
              except Exception as e:
                  print("Error:", e)
                  return None

          def get_ebs_throughput(volume_id):
              ec2 = boto3.client('ec2')
              
              try:
                  response = ec2.describe_volumes(VolumeIds=[volume_id])
                  throughput = response['Volumes'][0]['Throughput']
                  return throughput
              except Exception as e:
                  print("Error:", e)
                  return None

          def modify_ebs_throughput(volume_id, throughput):
              ec2 = boto3.client('ec2')
              
              try:
                  response = ec2.modify_volume(VolumeId=volume_id, Throughput=throughput)
                  print("Successfully modified EBS throughput.")
              except Exception as e:
                  print("Error:", e)

          # Lambda函数的入口
          def lambda_handler(event, context):
              instance_id = event['detail']['instance-id']
              volume_id = get_ebs_volume_id(instance_id)
              
              if volume_id:
                  throughput = get_ebs_throughput(volume_id)
                  if throughput:
                      print(f"EBS卷ID: {volume_id}")
                      print(f"当前吞吐量: {throughput} MB/s")

                      if throughput > int(os.environ['Threshold_Value']):
                          modify_ebs_throughput(volume_id, int(os.environ['throughput_value']))
                      else:
                          print("当前吞吐量不大于设定值，无需修改。")
                  else:
                      print(f"EBS卷的吞吐量信息无法获取。")
              else:
                  print("无法获取EBS卷ID。")
Outputs:
  EventBridgeRuleARN:
    Description: "ARN of the EventBridge rule"
    Value: !GetAtt EC2StatusChangeEventRule.Arn

  LambdaFunctionARN:
    Description: "ARN of the Lambda function"
    Value: !GetAtt EC2StatusChangeLambda.Arn

  StepFunctionARN:
    Description: "ARN of the Step Function"
    Value: !Ref EC2StatusChangeStepFunction